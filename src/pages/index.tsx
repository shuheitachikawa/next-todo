import React, { useState, useEffect, useReducer } from "react";
import Head from "next/head";
import Link from "next/link";
import { NextPage } from "next";
import Colors from "const/Colors";
import styled from "styled-components";
import { Layout } from "components/Layout";
import { TextField } from "components/TextField";
import { ButtonMain } from "components/ButtonMain";
import { Auth, withSSRContext } from "aws-amplify";
import { Formik, FormikProps } from "formik";
// import useSWR from "swr";

interface LoginInfo {
  email: string;
  password: string;
}

const Item = styled.div`
  background-color: ${Colors.PRIMARY};
  padding: 16px;
  margin-bottom: 16px;
  cursor: pointer;
`;

const LogoutButton = styled.button`
  display: block;
  background-color: ${Colors.PRIMARY};
  border: none;
  width: 100%;
  border-radius: 20px;
  padding: 8px 0;
  font-weight: bold;
  cursor: pointer;
`;

interface Props {
  userInfo: {
    id: string;
    username: string;
    attributes: {
      email: string;
      email_verified: string;
      sub: string;
    };
  } | null;
}

export const Home: NextPage = () => {
  const [loggedIn, setLoggedIn] = useState(false);

  useEffect(() => {
    Auth.currentUserInfo().then((res) => {
      if (res) {
        setLoggedIn(true);
        console.log(loggedIn);
      }
    });
  }, []);

  interface Error {
    emailRequired?: JSX.Element;
    passwordRequired?: JSX.Element;
  }
  const validate = (values: LoginInfo) => {
    const error: Error = {};
    if (!values.email) {
      error.emailRequired = (
        <p className="text-xs text-red-400 mt-1">入力してください</p>
      );
    }
    if (!values.password) {
      error.passwordRequired = (
        <p className="text-xs text-red-400 mt-1">入力してください</p>
      );
    }
    return error;
  };

  const handleLogin = async (props: LoginInfo): Promise<void> => {
    try {
      await Auth.signIn(props.email, props.password);
      setLoggedIn(true);
    } catch (error) {
      console.log(error.message);
    }
  };

  const handleLogout = async (): Promise<void> => {
    await Auth.signOut();
    setLoggedIn(false);
  };

  const signInForm = (
    <Formik
      onSubmit={handleLogin}
      initialValues={{ email: "", password: "" }}
      validate={validate}
    >
      {(props: FormikProps<LoginInfo>) => {
        const { handleSubmit, values, errors, isSubmitting, handleChange } =
          props;
        return (
          <form onSubmit={handleSubmit}>
            <div className="mb-4">
              <TextField
                id={"email"}
                type={"email"}
                placeholder={"メールアドレス"}
                value={values.email}
                onChange={handleChange}
                readOnly={isSubmitting}
              />
              {(errors as Error).emailRequired}
            </div>
            <div className="mb-6">
              <TextField
                id={"password"}
                type={"password"}
                placeholder={"パスワード"}
                value={values.password}
                onChange={handleChange}
                readOnly={isSubmitting}
              />
              {(errors as Error).passwordRequired}
            </div>
            <div className="flex justify-end">
              <ButtonMain isSubmitting={isSubmitting}>送信する</ButtonMain>
            </div>
          </form>
        );
      }}
    </Formik>
  );

  const mainMenu = (
    <div className="appItem">
      <Link href="/todo">
        <Item className="appItem">Todo</Item>
      </Link>
      <form onSubmit={handleLogout}>
        <ButtonMain isSubmitting={false}>ログアウト</ButtonMain>
      </form>
    </div>
  );

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <main>{loggedIn ? mainMenu : signInForm}</main>
      </Layout>
    </div>
  );
};

export default Home;
